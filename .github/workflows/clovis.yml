name: Clovis

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  # =========================================================
  # Build Job
  # =========================================================
  build:
    runs-on: ${{ matrix.platform[1] }}

    strategy:
      matrix:
        platform:
          - [windows, windows-latest, msvc, Debug]
          - [windows, windows-latest, msvc, Release]
          #- [windows, windows-latest, gcc, Debug]
          #- [windows, windows-latest, gcc, Release]
          #- [windows, windows-latest, clang, Debug]
          #- [windows, windows-latest, clang, Release]
          - [linux, ubuntu-latest, gcc, Debug]
          - [linux, ubuntu-latest, gcc, Release]
          - [linux, ubuntu-latest, clang, Debug]
          - [linux, ubuntu-latest, clang, Release]

    env:
      OPERATING_SYSTEM: ${{ matrix.platform[0] }}
      DISTRIBUTION: ${{ matrix.platform[1] }}
      COMPILER: ${{ matrix.platform[2] }}
      BUILD_TYPE: ${{ matrix.platform[3] }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Install Clang
      if: env.COMPILER == 'clang'
      uses: KyleMayes/install-llvm-action@v1
      with:
        version: "17.0"

    - name: Install CMake
      uses: lukka/get-cmake@latest

    - name: Configure
      shell: bash
      run: |
        if [ "${{ env.COMPILER }}" == "msvc" ]; then
          cmake -S . -B build -DCMAKE_BUILD_TYPE=$BUILD_TYPE -G "Visual Studio 17 2022"
        elif [ "${{ env.COMPILER }}" == "clang" ]; then
          cmake -S . -B build -DCMAKE_BUILD_TYPE=$BUILD_TYPE -G Ninja -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++
        elif [ "${{ env.COMPILER }}" == "gcc" ]; then
          cmake -S . -B build -DCMAKE_BUILD_TYPE=$BUILD_TYPE -G Ninja -DCMAKE_C_COMPILER=gcc -DCMAKE_CXX_COMPILER=g++
        fi

    - name: Build
      run: cmake --build build --parallel --config ${{ env.BUILD_TYPE }}

    - name: Test
      run: ctest --test-dir build --build-config ${{ env.BUILD_TYPE }} --output-on-failure

    #- name: Bench
    #  working-directory: ./build
    #  run: | 
    #    expected=$(git show --summary | grep -Po 'bench:\s*\K[0-9]+')
    #    ./Clovis bench > output
    #    actual=$(grep -Po 'bench:\s*\K[0-9]+' output)
    #    if [[ "$expected" != "$actual" ]]; then
    #      echo "Values did not match. actual: '$actual' expected: '$expected'"
    #      exit 1
    #    fi

    - name: Perft
      shell: bash
      working-directory: ./build
      run: | 
        set -e # Exit immediately if a command exits with a non-zero status
        if [[ "${{ env.OPERATING_SYSTEM }}" == "windows" ]]; then
          ./$BUILD_TYPE/Clovis perft
        else
          ./Clovis perft
        fi

    - name: Archive Output
      if: always()
      uses: actions/upload-artifact@v2
      with:
        name: bench-output
        path: output

  # =========================================================
  # Clang Format Job
  # =========================================================
  clang-format:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up clang-format
      run: |
        sudo apt-get update
        sudo apt-get install -y clang-format

    - name: Check code formatting
      run: find src \( -name '*.cpp' -o -name '*.h' \) -exec clang-format -Werror --style=file -i {} +

  # =========================================================
  # Clang Tidy Job
  # =========================================================
  clang-tidy:
    runs-on: ubuntu-latest
  
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Install Clang
        uses: KyleMayes/install-llvm-action@v1
        with:
          version: "17.0"
  
      - name: Install CMake
        uses: lukka/get-cmake@latest
  
      - name: Static code analysis
        run: |
          cmake -S . -B build -DCMAKE_CXX_CLANG_TIDY=clang-tidy -DCMAKE_BUILD_TYPE=Debug -G Ninja -DCMAKE_CC=clang -DCMAKE_CXX=clang++ -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++ -DCMAKE_CXX_COMPILER_TARGET=x86_64-pc-linux-gnu -DCMAKE_C_COMPILER_TARGET=x86_64-pc-linux-gnu -DVCPKG_TARGET_TRIPLET=x64-linux
          cmake --build build --parallel --config Debug
