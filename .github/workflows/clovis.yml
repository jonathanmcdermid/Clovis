name: Clovis

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  # =========================================================
  # Build Job
  # =========================================================
  build:
    runs-on: ${{ matrix.platform[1] }}

    strategy:
      matrix:
        platform:
          - [windows, windows-latest, msvc, Debug]
          - [windows, windows-latest, msvc, Release]
          - [windows, windows-latest, gcc, Debug]
          - [windows, windows-latest, gcc, Release]
          - [windows, windows-latest, clang-cl, Debug]
          - [windows, windows-latest, clang-cl, Release]
          - [linux, ubuntu-latest, gcc, Debug]
          - [linux, ubuntu-latest, gcc, Release]
          - [linux, ubuntu-latest, clang, Debug]
          - [linux, ubuntu-latest, clang, Release]

    env:
      OPERATING_SYSTEM: ${{ matrix.platform[0] }}
      DISTRIBUTION: ${{ matrix.platform[1] }}
      COMPILER: ${{ matrix.platform[2] }}
      BUILD_TYPE: ${{ matrix.platform[3] }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Install Clang
      if: env.COMPILER == 'clang'
      uses: KyleMayes/install-llvm-action@v1
      with:
        version: "17.0"

    - name: Install Conan
      id: conan
      uses: turtlebrowser/get-conan@main

    - name: Install CMake
      uses: lukka/get-cmake@latest

    - name: Configure
      shell: bash
      run: |
        if [ "${{ env.COMPILER }}" == "msvc" ]; then
          cmake -S . -B build -DCMAKE_BUILD_TYPE=$BUILD_TYPE -G "Visual Studio 17 2022" -DWARNINGS_AS_ERRORS=ON
        elif [ "${{ env.COMPILER }}" == "clang-cl" ]; then
          cmake -S . -B build -DCMAKE_BUILD_TYPE=$BUILD_TYPE -G "Visual Studio 17 2022" -T ClangCL
        elif [ "${{ env.COMPILER }}" == "clang" ]; then
          cmake -S . -B build -DCMAKE_BUILD_TYPE=$BUILD_TYPE -G Ninja -DCMAKE_CXX_COMPILER=clang++ -DWARNINGS_AS_ERRORS=ON
        elif [ "${{ env.COMPILER }}" == "gcc" ]; then
          cmake -S . -B build -DCMAKE_BUILD_TYPE=$BUILD_TYPE -G Ninja -DCMAKE_CXX_COMPILER=g++ -DWARNINGS_AS_ERRORS=ON
        fi

    - name: Build
      run: cmake --build build --parallel --config ${{ env.BUILD_TYPE }}

    - name: Test
      run: ctest --test-dir build --build-config ${{ env.BUILD_TYPE }} --output-on-failure

    - name: Perft
      if: env.BUILD_TYPE == 'Release'
      shell: bash
      run: | 
        set -e # Exit immediately if a command exits with a non-zero status
        ./build/bin/$BUILD_TYPE/clovis perft ./resources/perft.epd > /dev/null

    - name: Benchmark
      shell: bash
      run: python tools/bench.py build/bin/$BUILD_TYPE/clovis 14299399 resources/bench.csv

    - name: Checkout fast-chess
      if: env.BUILD_TYPE == 'Release' && env.OPERATING_SYSTEM == 'linux'
      uses: actions/checkout@v4
      with:
        repository: Disservin/fast-chess
        path: fast-chess
        ref: master

    - name: Build fast-chess
      if: env.BUILD_TYPE == 'Release' && env.OPERATING_SYSTEM == 'linux'
      working-directory: fast-chess
      run: make -j

    - name: Self-play
      if: env.BUILD_TYPE == 'Release' && env.OPERATING_SYSTEM == 'linux'
      shell: bash
      run: |
        set -e
        ./fast-chess/fastchess \
          -engine cmd=build/bin/$BUILD_TYPE/clovis name=clovis1\
          -engine cmd=build/bin/$BUILD_TYPE/clovis name=clovis2\
          -each tc=1+0.08 \
          -openings file=resources/silver.epd format=epd order=random \
          -rounds 100 \
          -concurrency 4 \
          -maxmoves 200 \
          -pgnout file=self-play.pgn

    - name: Process Data
      if: env.BUILD_TYPE == 'Release' && env.OPERATING_SYSTEM == 'linux'
      shell: bash
      run: | 
        set -e # Exit immediately if a command exits with a non-zero status
        ./build/bin/$BUILD_TYPE/process self-play.pgn resources/processed.epd > /dev/null
      #run: python tools/process.py build/bin/$BUILD_TYPE/clovis resources/games.pgn resources/processed.epd

    - name: Tune Evaluation
      if: env.BUILD_TYPE == 'Release' && env.OPERATING_SYSTEM == 'linux'
      shell: bash
      run: | 
        set -e # Exit immediately if a command exits with a non-zero status
        cat resources/processed.epd >> resources/quiet-labeled.epd
        ./build/bin/$BUILD_TYPE/clovis tune ./resources/quiet-labeled.epd 300

  # =========================================================
  # SPRT Job
  # =========================================================
  sprt:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Clang
      uses: KyleMayes/install-llvm-action@v1
      with:
        version: "17.0"

    - name: Install Conan
      id: conan
      uses: turtlebrowser/get-conan@main

    - name: Install CMake
      uses: lukka/get-cmake@latest

    - name: Configure
      run: cmake -S . -B build -DCMAKE_BUILD_TYPE=Release -G Ninja -DCMAKE_CXX_COMPILER=clang++ -DBUILD_TESTS=OFF -DBUILD_TOOLS=OFF

    - name: Build
      run: cmake --build build --parallel --config Release

    - name: Checkout fast-chess
      uses: actions/checkout@v4
      with:
        repository: Disservin/fast-chess
        path: fast-chess
        ref: master

    - name: Build fast-chess
      working-directory: fast-chess
      run: make -j
    
    - name: Download clovis-release-gcc-linux artifact
      run: |
        curl -L -o build/clovis-release-gcc-linux https://github.com/jonathanmcdermid/Clovis/releases/download/III/clovis-release-gcc-linux
        chmod +x build/clovis-release-gcc-linux
    
    - name: Self-play
      run: |
        set -e
        ./fast-chess/fastchess \
          -engine cmd=build/bin/Release/clovis name=clovis-new \
          -engine cmd=build/clovis-release-gcc-linux name=clovis-old \
          -each tc=1+0.08 \
          -openings file=resources/silver.epd format=epd order=random \
          -rounds 500 \
          -repeat \
          -concurrency 4 \
          -pgnout file=self-play.pgn \
          -maxmoves 200 \
          -sprt elo0=0 elo1=10 alpha=0.05 beta=0.05
              
    - name: Upload PGN file
      uses: actions/upload-artifact@v4.3.0
      with:
        name: self-play-pgn
        path: self-play.pgn

    - name: Upload Log file
      uses: actions/upload-artifact@v4.3.0
      with:
        name: log.txt
        path: log.txt

  # =========================================================
  # Clang Format Job
  # =========================================================
  clang-format:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up clang-format
      run: |
        sudo apt-get update
        sudo apt-get install -y clang-format

    - name: Check code formatting
      run: find src \( -name '*.cpp' -o -name '*.h' \) -exec clang-format -Werror --style=file -n {} +

  # =========================================================
  # Editor Config Job
  # =========================================================
  editorconfig:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Install editorconfig-checker
      uses: editorconfig-checker/action-editorconfig-checker@main

    - name: Check CMakeLists.txt formatting
      run: find . \( -name 'CMakeLists.txt' \) -exec editorconfig-checker {} \+ || { echo "EditorConfig check failed!"; exit 1; }

    - name: Check C++ formatting
      run: find src \( -name '*.cpp' -o -name '*.hpp' \) -exec editorconfig-checker {} \+ || { echo "EditorConfig check failed!"; exit 1; }

  # =========================================================
  # Clang Tidy Job
  # =========================================================
  clang-tidy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Install Clang
        uses: KyleMayes/install-llvm-action@v1
        with:
          version: "17.0"

      - name: Install Conan
        id: conan
        uses: turtlebrowser/get-conan@main

      - name: Install CMake
        uses: lukka/get-cmake@latest

      - name: Static code analysis
        run: |
          cmake -S . -B build -DCMAKE_CXX_CLANG_TIDY=clang-tidy -DCMAKE_BUILD_TYPE=Debug -G Ninja -DCMAKE_CXX_COMPILER=clang++
          cmake --build build --parallel --config Debug
  
  # =========================================================
  # Code Coverage Job
  # =========================================================
  code-coverage:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Conan
      id: conan
      uses: turtlebrowser/get-conan@main

    - name: Install CMake
      uses: lukka/get-cmake@latest

    - name: Install GCC Coverage
      run: |
        sudo apt-get update
        sudo apt-get install -y gcovr

    - name: Configure
      run: cmake -S . -B build -DCMAKE_BUILD_TYPE=Debug -G Ninja -DCOVERAGE=ON -DBUILD_TOOLS=OFF

    - name: Build
      run: cmake --build build --parallel --config debug

    - name: Run Tests
      run: cd build && ctest && cd ..

    - name: Generate HTML code coverage reports
      run: | 
        mkdir build/code-coverage
        gcovr -r ./src/ ./build/ --exclude='.*/test/.*' --exclude='.*/dynamic_library/.*' --exclude='.*/version.h' --html --html-details -o ./build/code-coverage/index.html
    
    - name: Coverage visualization in pipeline summary
      run: gcovr -r ./src/ ./build/ --exclude='.*/test/.*' --exclude='.*/dynamic_library/.*' --exclude='.*/version.h' --exclude-unreachable-branches --print-summary -o ./build/coverage.xml

    - name: Upload Artifacts
      uses: actions/upload-artifact@v4.3.0
      with:
        name: code-coverage
        path: |
          build/code-coverage
          build/coverage.xml
